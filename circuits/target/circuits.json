{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":14300438322738585286,"abi":{"parameters":[{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"},{"name":"recipient","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"merkle_proof","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"},{"name":"is_even","type":{"kind":"array","length":20,"type":{"kind":"boolean"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"7d3NaupAGIfxe5m1i8xkPoy3cijFj1gCIUrUAwfpvR8tjX3/ENp18VnGvDP6/lbPzqvbtZvL22s37A8nt/pzdf1huz53h+H2dHWh+vjsdFwP98fTeT2e3apOceHaYedWsYrvC7fv+tatsn9fzIzmaTRUj9GQZkZD8c3nbCh1/f2wL2W62Jcm/TBcPW72VV7a4ZeFC/4JdgxPsGM9t2NspiMpht+/Y3yCHdPcjimlaccm2x3vJ/LciVymLykxf6+S/PTjU/5SyeGXAhY4LMcSDsvRwGE46goOy+HhsBwBDstRw2E5IhyWI8FhOahS4aBKhYMqFQ6q1HJEqlQ4qFLhoEqFgyoVjgiH5aBKhYMqFQ6qVDioUuGgSi1HokqFgyoVDqpUOKhS4YhwWA6qVDioUuGgSoWDKhUOqtRyZKpUOKhS4aBKhYMqFY4Ih+WgSoWDKhUOqlQ4qFLhoEotR6FKhYMqFQ6qVDioUuGIcFgOqlQ4qFLhoEqFgyoVDqrUciypUuGgSoWDKhUOqlQ4IhyWgyoVDqpUOKhS4aBKhYMqtRwNVSocVKlwUKXCQZUKR4TDclClwkGVCgdVKhxUqXBQpZbDV2SpetCl6kGYqgdlqh4RD/GgTdWDOFUP6lQ9yFP1oE/Fw9On6kGfqgd9qh70qXpEPMSDPlUP+lQ96FP1oE/Vgz4Vj0Cfqgd9qh70qXrQp+oR8RAP+lQ9Zvu0pIfHsrIeL7eHzdj1fff2av/k7vbx3/XYrTd9+/m4vwxb8/b87zi9mc4fx8O23V3G9n7Tx7vb9f8B","file_map":{"25":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"61":{"source":"use std::hash::poseidon2;\nmod merkle_tree;\n\nfn main(\n    // Public inputs\n    root: pub Field,\n    nullifier_hash: pub Field,\n    recipient: pub Field,\n\n    // Private inputs\n    nullifier: Field,\n    secret: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) {\n    // comput the commitment Poseidon(nullifier, secret)\n    let commitment = poseidon2::Poseidon2::hash([nullifier, secret], 2);\n    // check that the nullifier matches the nullifier hash\n    let computed_nullifier_hash = poseidon2::Poseidon2::hash([commitment], 1);\n    assert(computed_nullifier_hash == nullifier_hash);\n\n    // check that the commitment is in the Merkle tree\n    let computed_root = merkle_tree::compute_merkle_root(commitment, merkle_proof, is_even);\n    assert(computed_root == root);\n\n    let recipient_binding = recipient * recipient;\n    assert(recipient_binding == recipient * recipient); // Ensure recipient is a valid field element\n}","path":"/Users/aldosuryaongko/Desktop/learning-zk/zk_mixer/circuits/src/main.nr"},"62":{"source":"use std::hash::poseidon2;\n\npub fn compute_merkle_root(\n    leaf: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) -> Field {\n    // temporary variable to store the hash for the current level we are working on\n    let mut hash = leaf;\n    // increment through the levels\n    for i in 0..20 {\n        let (left, right) = if is_even[i] {\n            (hash, merkle_proof[i])\n        } else {\n            (merkle_proof[i], hash)\n        };\n        // compute the hash for the current level\n        hash = poseidon2::Poseidon2::hash([left, right], 2);\n    }\n    // return the root of the Merkle tree\n    hash\n}","path":"/Users/aldosuryaongko/Desktop/learning-zk/zk_mixer/circuits/src/merkle_tree.nr"}},"names":["main"],"brillig_names":[]}